#sidebar TOC

<h1>Bus Pirate 201 Tutorial</h1>

<img src="http://wherelabs.files.wordpress.com/2009/11/bpv3-unbox3.jpg?w=450&h=338" />

<p>By popular demand, here&#8217;s a second part to the original <a href="http://dangerousprototypes.com/2009/07/23/bus-pirate-101/">Bus Pirate 101 tutorial</a>. This time we walk through the Bus Pirate user interface and demonstrate some basic stuff like bus modes, power supplies, pull-up resistors, and number entry. Even if you&#8217;ve worked with the Bus Pirate for a while, you might learn some new tricks in this detailed use tutorial written by the primary developer.</p>

<p>Unboxing photo by <a href="http://img338.imageshack.us/img338/2870/pb130503.jpg">Uwe Bannow</a>, thanks!</p>

<p><strong>Enter a bus mode</strong></p>
<p style="padding-left:30px;">* Syntax error, type ? for help<br />
HiZ&gt;W<br />
No mode set, M for mode <strong>&lt;&lt;&lt;not allowed in HiZ</strong><br />
HiZ&gt;</p>
<p>The Bus Pirate always starts in <a href="http://en.wikipedia.org/wiki/High_impedance">high impedance</a> mode (HiZ), a safe mode with all outputs disabled. Itâ€™s intended to protect any connected devices from conditions beyond their specifications. If your terminal is blank, press enter to see the command prompt. Type &#8216;?&#8217; to see a complete list of menu options and syntax available for the current hardware and software.</p>

<p style="padding-left:30px;">HiZ&gt;m <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;configure bus mode</strong><br />
</span>1. HiZ<br />
&#8230;<br />
4. I2C<br />
&#8230;<br />
10. LCD<br />
(1) &gt;4 <span style="text-decoration:underline;"><strong>&lt;&lt;&lt; select I2C (option 4)</strong></span><br />

READY<br />
I2C&gt;</p>
<p>We&#8217;ll be using a 24AA I2C <a href="http://en.wikipedia.org/wiki/EEPROM">EEPROM</a> (data storage chip) on the <a href="http://dangerousprototypes.com/2009/07/30/prototype-bus-pirate-3eeprom-explorer-board/">3EEPROM explorer board</a> to demonstrate some features. <em>You don&#8217;t need the chip to follow along, you won&#8217;t damage anything by following the tutorial without a chip. </em></p>
<p><em></em>Press &#8216;M&#8217; to configure a bus mode. Choose the I2C bus, configure it for software mode, high speed.</p>

<p><strong>Power supplies</strong></p>
<p>The on-board power supplies can be activated outside of HiZ mode.</p>
<p style="padding-left:30px;">I2C&gt;w<span style="text-decoration:underline;"><strong>&lt;&lt;&lt;power supplies off</strong></span><br />
POWER SUPPLIES OFF<br />
I2C&gt;v<strong><span style="text-decoration:underline;"><strong>&lt;&lt;&lt;voltage report</strong></span></strong><br />
Voltage monitors: 5V: 0.0 | 3.3V: 0.0 | VPULLUP: 0.0 |<br />
I2C&gt;W<span style="text-decoration:underline;"><strong>&lt;&lt;&lt;power supplies on</strong></span><br />

POWER SUPPLIES ON<br />
I2C&gt;v<span style="text-decoration:underline;"><strong>&lt;&lt;&lt;voltage monitor report</strong></span><br />
Voltage monitors: 5V: 4.9 | 3.3V: 3.2 | VPULLUP: 0.0 |<br />
I2C&gt;</p>
<p>Capital &#8216;W&#8217; activates the on-board supplies, small &#8216;w&#8217; turns them off. Turn the power supplies on, then press v to show a power supply voltage report.</p>

<p>Note that W is syntax and not a menu option, it can be used with other syntax to toggle the power in the middle of complex bus operations.</p>
<p><strong>Pull-up resistors</strong></p>
<p>Some bus types, such as I2C, require a resistor to create a &#8216;1&#8242; on the bus. This is called an <a href="http://hackaday.com/2009/07/01/mixed-voltage-interfacing-with-the-bus-pirate/">open collector or open drain bus</a>. Without a <a href="http://en.wikipedia.org/wiki/Pull-up_resistor">pull-up resistor</a>, the bus will only read &#8216;0&#8242;. Some bus modes are open collector only (1-Wire, I2C), most have an open collector option.</p>
<p style="padding-left:30px;">I2C&gt;v <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;voltage monitor report</strong></span><br />

Voltage monitors: 5V: 4.9 | 3.3V: 3.2 | VPULLUP: 4.9 |<br />
I2C&gt;</p>
<p>Connect the Vpu pin of the IO header to a voltage. The on-board pull-up resistors apply the voltage connected to the Vpu pin to the bus pins through 10Kohm resistors. Press v and verify that the Vpullup voltage shows the desired value.</p>
<p style="padding-left:30px;">I2C&gt;p <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;configure pull-up resistors</strong></span><br />
1. Pull-ups off<br />
2. Pull-ups on<br />
(1) &gt;2 <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;enable </strong><br />

</span>Pull-up resistors ON<br />
I2C&gt;</p>
<p>Press p to configure the on-board pull-up resistors, enable them. For more, see the <a href="http://dangerousprototypes.com/2009/07/27/bus-pirate-practical-guide-to-pull-up-resistors/">practical guide to Bus Pirate pull-up resistors</a>.</p>
<p><strong>Macros</strong></p>
<p>Macros are preprogrammed shortcuts. Some of the macros available include: smart card interrogation, I2C address scanners, JTAG chain probes, transparent UART bridges, LCD initialization, and bus sniffers.</p>
<p style="padding-left:30px;">I2C&gt;(0)<span style="text-decoration:underline;"><strong>&lt;&lt;&lt; show macro menu</strong></span><br />

0.Macro menu<br />
1.7bit address search<br />
2.I2C sniffer<br />
I2C&gt;(1)<strong><span style="text-decoration:underline;">&lt;&lt;&lt; macro 1, I2C address search</span></strong><br />
Searching 7bit I2C address space.<br />
Found devices at:<br />
0xA0(0&#215;50 W) 0xA1(0&#215;50 R)<br />

I2C&gt;</p>
<p>Type (0) to get a list of macros in any mode. The macro number can be entered in any format, (0&#215;00) and (0b0) are also valid macro entries.</p>
<p>I2C devices respond to a 7bit address. We could look up the address in the datasheet, but instead we&#8217;ll use the address scanner macro (1). The Bus Pirate scaned all possible addresses and found the chip at 0&#215;50 (0xa0/0xa1).</p>
<p>If you don&#8217;t have an I2C chip attached for this tutorial, the Bus Pirate won&#8217;t find any I2C devices. If it finds devices at every address, make sure there&#8217;s powered pull-up resistors on the I2C bus pins.</p>
<p>Read more about the <a href="http://dangerousprototypes.com/2009/09/07/scan-for-i2c-read-and-write-addresses/">I2C address scan</a>.</p>

<p><strong>Number entry and formats</strong></p>
<p>Numbers can be entered as <a href="http://en.wikipedia.org/wiki/Binary_numeral_system">binary</a>, <a href="http://en.wikipedia.org/wiki/Decimal">decimal</a>, or <a href="http://en.wikipedia.org/wiki/Hexadecimal">hexadecimal</a> values, mix and match, use whatever best suits the datasheet or task.</p>
<p style="padding-left:30px;">I2C&gt;= <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;convert number formats</strong></span><br />
CONVERT (1) &gt;10 <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;enter value in any format</strong></span><br />

0&#215;0A<br />
10<br />
0b00001010<br />
I2C&gt;</p>
<p>Use the &#8216;=&#8217; menu to convert between formats. Decimal 10 is equivalent to 0&#215;0a (HEX) and 0b1010 (BIN). <a href="http://dangerousprototypes.com/2009/08/27/bus-pirate-hexdecbin-converter">More about the value converter</a>.</p>

<p style="padding-left:30px;">CONVERT (1) &gt;0&#215;0f<br />
0&#215;0F<br />
15<br />
0b00001111</p>
<p>0&#215;0f is a HEX formatted value. The leading 0 is optional for values less than 0&#215;10, 0xf is also valid. HEX can also be entered as 0h0f, if that&#8217;s more familiar.</p>
<p style="padding-left:30px;">CONVERT (1) &gt;0b11<br />

0&#215;03<br />
3<br />
0b00000011</p>
<p>0b11 is a binary 3. It can also be entered with or without leading 0s: 0b00000011, 0b011, etc. <a href="http://dangerousprototypes.com/2009/09/01/bus-pirate-number-formats/">More about number entry and output display</a>.</p>
<p><strong>Repeat command</strong></p>
<p>Most syntax can be repeated by appending &#8216;:&#8217; and a repeat value, the repeat value can be in any number format.</p>

<p style="padding-left:30px;">I2C&gt;0b10:0&#215;03<br />
WRITE: 0&#215;02 , 0&#215;03 TIMES ACK <span style="text-decoration:underline;"><strong>&lt;&lt;&lt;&#8217;0b10&#8242; three times</strong></span><br />
I2C&gt;</p>
<p>0b10:0&#215;03 uses the repeat command(:) to write 2 (0b10) to the I2C bus three times (:0&#215;03).</p>

<p style="padding-left:30px;">I2C&gt;[0xa1 r r r:3]<br />
I2C START BIT<br />
WRITE: 0xA1 ACK<br />
READ: 0&#215;0F ACK<span style="text-decoration:underline;"><strong>&lt;&lt;&lt; read a single byte</strong></span><br />
READ: 0&#215;0E ACK<span style="text-decoration:underline;"><strong>&lt;&lt;&lt; read a single byte</strong></span><br />

READ 0&#215;03 BYTES:<span style="text-decoration:underline;"><strong>&lt;&lt;&lt; read multiple bytes</strong></span><br />
0&#215;03 ACK 0&#215;0E ACK 0&#215;02 NACK<br />
I2C STOP BIT<br />
I2C&gt;</p>
<p>r is the generic command to read a single byte in all bus modes, it can also be repeated with the &#8216;:&#8217; command (r:3). The Bus Pirate output is HEX formatted by default, but you can change it to binary or decimal from the output mode menu &#8216;o&#8217;.</p>

<p><strong> When you&#8217;re done</strong></p>
<p style="padding-left:30px;">I2C&gt;m<span style="text-decoration:underline;"><strong>&lt;&lt;&lt;mode menu</strong></span><br />
1. HiZ<br />
&#8230;<br />
10. LCD<br />
(1) &gt;<span style="text-decoration:underline;"><strong>&lt;&lt;&lt;HiZ is the default</strong></span><br />
Mode selected<br />

HiZ&gt;</p>
<p>When you&#8217;re done, press &#8216;m&#8217;. The Bus Pirate immediately turns off all outputs, power supplies, and pull-up resistors, and prompts for a new mode. Choose 1 (or just press enter for the default option) to return to HiZ mode.</p>
<p><strong>Taking it further</strong></p>
<p>In <a href="http://dangerousprototypes.com/2009/07/23/bus-pirate-101/">Bus Pirate 101</a> we looked at the Bus Pirate hardware, installed the driver, and configured the serial terminal. In Bus Pirate 102 we entered a bus mode and demonstrated some basic commands.</p>
<p>Now you&#8217;re ready to interface some <a href="http://dangerousprototypes.com/bus-pirate-manual/#demos">devices</a>. The <a href="http://dangerousprototypes.com/2009/07/30/prototype-bus-pirate-3eeprom-explorer-board/">3EEPROM explorer board</a> might be a good place to start, it has three common EEPROM chips with three popular buses (1-Wire, I2C and SPI).</p>

<p>The <a href="http://dangerousprototypes.com/bus-pirate-manual/">Bus Pirate manual</a> is continuously updated. Check out the expanded <a href="http://dangerousprototypes.com/bus-pirate-manual/#ioheader">IO header pin reference</a>, complete <a href="http://dangerousprototypes.com/bus-pirate-manual/#menus">menu options guide</a>, and individual <a href="http://dangerousprototypes.com/bus-pirate-manual/#busmodes">bus mode documentation</a>.</p>
<p>If you program on a PC, you could automate your work with a script for the Bus Pirate <a href="http://dangerousprototypes.com/2009/10/09/bus-pirate-raw-bitbang-mode/">binary interface mode</a>. There&#8217;s <a href="http://code.google.com/p/the-bus-pirate/source/browse/#svn/trunk/scripts">a bunch of examples</a> to get you started.</p>

<p>There&#8217;s also an active <a href="http://whereisian.com/forum/index.php?board=4.0">Bus Pirate forum</a>.</p>

